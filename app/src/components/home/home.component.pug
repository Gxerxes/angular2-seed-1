div(class="middle")
  div(class="row")
    div(class="col8")
      h2
        | Sample app &middot; 
        span(class="clr-delta") Angular 2
      p This is an example app based on Angular 2. It relies on TypeScript, SystemJS, Gulp and Sass. The project comes with various features you may need to build a typical single page application (SPA). Here are the most important aspects:
      ul
        li a routing concept (separate route configuration file)
        li a lazy loading concept
        li login and dashboard view components (authorized/public routes)
        li error page handling
        li a directive (form inputs)
        li a service (authorization)
        li a pipe (determine the active route)
        li uses core-js, Reflect, Rx.js and Zone.js
      p
        | The project was developed with an IDE in mind so the Gulp configuration works well with or without an editor that has integrated TypeScript/Sass compilation (like WebStorm or Visual Studio). Gulp is mandatory for the creation of the 
        strong Angular 2 bundle
        |  and copying polyfills so you don't need to link to modules from 
        em node_modules
        |  inside your web app. Gulp can be used for compiling TypeScript/Sass and runnig a local web server with file watchers. There are also Gulp tasks for deploying a production environment: JavaScript code gets minified and all JavaScript vendor libraries and CSS code will be concatenated into a single file. The 
        em index.html
        |  contains a minimal pre-processing condition for production.
      p
        | Since Angular 2 RC 5 there is support for 
        strong modules
        | . This seed makes use of modules and implements lazy loading for separate parts of the app: every view component (except the 
        em error
        |  view) is loaded on demand. There is a shared component called 
        em form-input-text
        |  which is also built up as module so it gets loaded only in those views where it's needed (in this seed, it's located in the 
        em login
        |  view). Additionally, there's a 
        em SharedModule
        |  which contains classes for all directives and pipes of the app: they're always loaded, no matter what's the entrypoint of the user. The concept of the 
        em SharedModule
        |  is also described 
        a(href="https://angular.io/docs/ts/latest/guide/ngmodule.html") in the documentation
        | . Keep in mind that every component you put in there will always be loaded globally. If you want to lazy load components in different views, create a module for them and import that module.
      p
        | Head over to the 
        a([routerLink]="['/login']") login page
        |  to see the components, directives and services in action. There is a sample dashboard view which represents an area for authorized users.
      p
        strong Browser support:
        |  all major browsers including Internet Explorer 11+, Edge, Firefox, Chrome, Opera and Safari
      p
        a(href="https://github.com/matthias-schuetz/angular2-seed/", class="button") Download on GitHub
    div(class="col4")
      h2 Structure
      p
        | The seed comes with a minimal file structure where everything gets compiled inside the 
        em app
        |  folder. For production, there will be an additional 
        em dist/
        |  folder containing minified files.
      ul(class="file-structure")
        li
          span(class="icon") &#x0251C;
          | app/
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | assets/
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | src/
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | styles/
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | dist.head.html
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | index.html
        li(class="lvl2")
          span(class="icon") &#x0251C;
          | system.conf.js
        li
          span(class="icon") &#x0251C;
          span(class="clr-delta") node_modules/
        li
          span(class="icon") &#x0251C;
          span(class="clr-delta") typings/
        li
          span(class="icon") &#x0251C;
          | gulpfile.js
        li
          span(class="icon") &#x0251C;
          | protractor.conf.js
        li
          span(class="icon") &#x0251C;
          | tsconfig.json
        li
          span(class="icon") &#x0251C;
          | tslint.json
        li
          span(class="icon") &#x0251C;
          | typings.json